@precedence {
  AmendmentDeclaration,
  ModuleDeclaration,
  ImportDeclaration,
  statement
}

@top Program { (AmendmentDeclaration? | ModuleDeclaration?) ImportDeclaration* statement* }

@skip { space | LineComment | BlockComment | DocComment }

kw<term> { @specialize[@name={term}]<Identifier, term> }

AmendmentDeclaration {
  kw<"amends"> String
}

ImportDeclaration {
  kw<"import"> String
}

ModuleDeclaration {
  kw<"module"> Identifier ("." Identifier)*
}

Assignment {
  Identifier "=" expression
}

ObjectDeclaration {
  Identifier "{" statement* "}"
}

statement {
  Boolean |
  Identifier |
  String |
  Number |
  FunctionCall |
  Assignment |
  ObjectDeclaration
}

expression {
  Boolean |
  Identifier |
  String |
  Number |
  FunctionCall |
  "(" expression ")"
}

argumentList {
  expression ("," expression)*
}

FunctionCall {
  Identifier "(" argumentList? ")"
}

@tokens {
  @precedence {
    Boolean,
    Identifier
  }
  
  identifierChar { @asciiLetter | $[_$\u{a1}-\u{10ffff}] }

  Identifier { identifierChar (identifierChar | @digit)* }

  String { '"' (!["\\] | "\\" _)* '"' }

  Number { $[0-9]+ ("." $[0-9]+)? }

  Boolean { "true" | "false" }

  @precedence {
    DocComment,
    LineComment
  }

  LineComment { "//" ![\n]* }

  DocComment { "///" ![\n]* }

  BlockComment[isolate] { "/*" blockCommentRest }

  blockCommentRest { ![*] blockCommentRest | "*" blockCommentAfterStar }

  blockCommentAfterStar { "/" | "*" blockCommentAfterStar | ![/*] blockCommentRest }

  space { $[ \t\n\r]+ }

  "(" ")" "," "="
}

@detectDelim
