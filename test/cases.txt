# Booleans

true
false
null

==>

Program(Boolean, Boolean, Boolean)

# Numbers

42
3.14
0x1A

==>

Program(Number, Number, Number)

# Strings

"hello"
"""multi
line"""

==>

Program(String, String)

# Identifiers

name
camelCase

==>

Program(Identifier, Identifier)

# Object Declaration

thing {
  x = "abc"
  y = 123
}

==>

Program(ObjectDeclaration(Definition(Identifier), Assignment(Definition(Identifier), PostfixExpression(PrimaryExpression(String))), Assignment(Definition(Identifier), PostfixExpression(PrimaryExpression(Number)))))

# Class Declaration

class thing {
  name: String = "default"
}

==>

Program(ClassDeclaration(class, Identifier, Assignment(Definition(Identifier), UnionType(TypeAtom(SimpleType(BuiltinType(String)))), PostfixExpression(PrimaryExpression(String)))))
# Function Declaration

function add(x: Int) = x + 1

==>

Program(FunctionDeclaration(function, Definition(Identifier), "(", Definition(Identifier), ":", UnionType(TypeAtom(SimpleType(BuiltinType(Int)))), ")", "=", BinaryExpression(PostfixExpression(PrimaryExpression(Identifier)), "+", PostfixExpression(PrimaryExpression(Number)))))

# Assignment

x = y + z

==>

Program(Assignment(Definition(Identifier), BinaryExpression(PostfixExpression(PrimaryExpression(Identifier)), PostfixExpression(PrimaryExpression(Identifier)))))

# New Expression

x = new { name = "test" }

==>

Program(Assignment(Definition(Identifier), PostfixExpression(PrimaryExpression(NewExpression(new, "{", Assignment(Definition(Identifier), PostfixExpression(PrimaryExpression(String))), "}")))))

# When Statement

when (condition) {
  doSomething
}

==>

Program(ControlStatement(when, "(", PostfixExpression(PrimaryExpression(Identifier)), ")", Block("{", Identifier, "}")))

# For Statement

obj {
  for (item in items) {
    item
  }
}

==>

Program(ObjectDeclaration(
  Definition(Identifier),
  ControlStatement(
    ForStatement(for, "(", ForVariable(Definition(Identifier)), in, PostfixExpression(PrimaryExpression(Identifier)), ")", Block("{", Identifier, "}"))
  )
))

# Import

import "some/file.pkl"

==>

Program(ImportDeclaration(import, String))

# Module

module com.example

==>

Program(ModuleDeclaration(module, ModuleName(Identifier, ".", Identifier)))
